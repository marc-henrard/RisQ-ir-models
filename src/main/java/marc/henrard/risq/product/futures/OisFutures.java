/**
 * Copyright (C) 2018 - present by Marc Henrard.
 */
package marc.henrard.risq.product.futures;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.ImmutableValidator;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.ReferenceData;
import com.opengamma.strata.basics.Resolvable;
import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.product.SecuritizedProduct;
import com.opengamma.strata.product.SecurityId;
import com.opengamma.strata.product.swap.Swap;
import com.opengamma.strata.product.swap.SwapLeg;
import com.opengamma.strata.product.swap.SwapLegType;

/**
 * A futures based on an Overnight Indexed Swap.
 * <p>
 * The futures price represents the fixed rate of the OIS delivered. 
 * Long the futures is long the rate and equivalent to a pay fix OIS.
 * <p>
 * This futures design is described in:
 * Henrard, Marc (2018). Risk-based overnight-linked futures design. TODO: Add SSRN publication link when available.
 * 
 * @author Marc Henrard
 */
@BeanDefinition
public final class OisFutures 
    implements SecuritizedProduct, Resolvable<OisFuturesResolved>, ImmutableBean, Serializable {

  /**
   * The security identifier.
   * <p>
   * This identifier uniquely identifies the security within the system.
   */
  @PropertyDefinition(validate = "notNull")
  private final SecurityId securityId;
  /**
   * The OIS underlying the futures. The first leg is fixed and the second leg is overnight.
   */
  @PropertyDefinition(validate = "notNull")
  private final Swap underlying;
  /**
   * The accrual factor or risk measure associated to the futures, typically 0.25 for a 3-month swap.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegativeOrZero")
  private final double accrualFactor;
  /**
   * The futures notional.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegativeOrZero")
  private final double notional;
  /**
   * The last trading date.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate lastTradeDate;

  //-------------------------------------------------------------------------
  @ImmutableValidator
  private void validate() {
    List<SwapLeg> legs = underlying.getLegs();
    ArgChecker.isTrue(legs.size() == 2, "underlying swap must have two legs");
    ArgChecker.isTrue(legs.get(0).getType().equals(SwapLegType.FIXED), 
        "underlying swap first leg must be fixed");
    ArgChecker.isTrue(legs.get(1).getType().equals(SwapLegType.OVERNIGHT), 
        "underlying swap second leg must be overnight");
    ArgChecker.isFalse(legs.get(0).getStartDate().getUnadjusted().isBefore(lastTradeDate),
        "underlying swap start must be on or after last trade date");
  }

  @Override
  public OisFuturesResolved resolve(ReferenceData refData) {
    return OisFuturesResolved.builder()
        .securityId(securityId)
        .underlying(underlying.resolve(refData))
        .accrualFactor(accrualFactor)
        .notional(notional)
        .lastTradeDate(lastTradeDate).build();
  }

  @Override
  public Currency getCurrency() {
    return underlying.getLegs().get(0).getCurrency();
  }
  
  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code OisFutures}.
   * @return the meta-bean, not null
   */
  public static OisFutures.Meta meta() {
    return OisFutures.Meta.INSTANCE;
  }

  static {
    MetaBean.register(OisFutures.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static OisFutures.Builder builder() {
    return new OisFutures.Builder();
  }

  private OisFutures(
      SecurityId securityId,
      Swap underlying,
      double accrualFactor,
      double notional,
      LocalDate lastTradeDate) {
    JodaBeanUtils.notNull(securityId, "securityId");
    JodaBeanUtils.notNull(underlying, "underlying");
    ArgChecker.notNegativeOrZero(accrualFactor, "accrualFactor");
    ArgChecker.notNegativeOrZero(notional, "notional");
    JodaBeanUtils.notNull(lastTradeDate, "lastTradeDate");
    this.securityId = securityId;
    this.underlying = underlying;
    this.accrualFactor = accrualFactor;
    this.notional = notional;
    this.lastTradeDate = lastTradeDate;
    validate();
  }

  @Override
  public OisFutures.Meta metaBean() {
    return OisFutures.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the security identifier.
   * <p>
   * This identifier uniquely identifies the security within the system.
   * @return the value of the property, not null
   */
  public SecurityId getSecurityId() {
    return securityId;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the OIS underlying the futures. The first leg is fixed and the second leg is overnight.
   * @return the value of the property, not null
   */
  public Swap getUnderlying() {
    return underlying;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the accrual factor or risk measure associated to the futures, typically 0.25 for a 3-month swap.
   * @return the value of the property
   */
  public double getAccrualFactor() {
    return accrualFactor;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the futures notional.
   * @return the value of the property
   */
  public double getNotional() {
    return notional;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the last trading date.
   * @return the value of the property, not null
   */
  public LocalDate getLastTradeDate() {
    return lastTradeDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      OisFutures other = (OisFutures) obj;
      return JodaBeanUtils.equal(securityId, other.securityId) &&
          JodaBeanUtils.equal(underlying, other.underlying) &&
          JodaBeanUtils.equal(accrualFactor, other.accrualFactor) &&
          JodaBeanUtils.equal(notional, other.notional) &&
          JodaBeanUtils.equal(lastTradeDate, other.lastTradeDate);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(securityId);
    hash = hash * 31 + JodaBeanUtils.hashCode(underlying);
    hash = hash * 31 + JodaBeanUtils.hashCode(accrualFactor);
    hash = hash * 31 + JodaBeanUtils.hashCode(notional);
    hash = hash * 31 + JodaBeanUtils.hashCode(lastTradeDate);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("OisFutures{");
    buf.append("securityId").append('=').append(securityId).append(',').append(' ');
    buf.append("underlying").append('=').append(underlying).append(',').append(' ');
    buf.append("accrualFactor").append('=').append(accrualFactor).append(',').append(' ');
    buf.append("notional").append('=').append(notional).append(',').append(' ');
    buf.append("lastTradeDate").append('=').append(JodaBeanUtils.toString(lastTradeDate));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code OisFutures}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code securityId} property.
     */
    private final MetaProperty<SecurityId> securityId = DirectMetaProperty.ofImmutable(
        this, "securityId", OisFutures.class, SecurityId.class);
    /**
     * The meta-property for the {@code underlying} property.
     */
    private final MetaProperty<Swap> underlying = DirectMetaProperty.ofImmutable(
        this, "underlying", OisFutures.class, Swap.class);
    /**
     * The meta-property for the {@code accrualFactor} property.
     */
    private final MetaProperty<Double> accrualFactor = DirectMetaProperty.ofImmutable(
        this, "accrualFactor", OisFutures.class, Double.TYPE);
    /**
     * The meta-property for the {@code notional} property.
     */
    private final MetaProperty<Double> notional = DirectMetaProperty.ofImmutable(
        this, "notional", OisFutures.class, Double.TYPE);
    /**
     * The meta-property for the {@code lastTradeDate} property.
     */
    private final MetaProperty<LocalDate> lastTradeDate = DirectMetaProperty.ofImmutable(
        this, "lastTradeDate", OisFutures.class, LocalDate.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "securityId",
        "underlying",
        "accrualFactor",
        "notional",
        "lastTradeDate");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          return securityId;
        case -1770633379:  // underlying
          return underlying;
        case -1540322338:  // accrualFactor
          return accrualFactor;
        case 1585636160:  // notional
          return notional;
        case -1041950404:  // lastTradeDate
          return lastTradeDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public OisFutures.Builder builder() {
      return new OisFutures.Builder();
    }

    @Override
    public Class<? extends OisFutures> beanType() {
      return OisFutures.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code securityId} property.
     * @return the meta-property, not null
     */
    public MetaProperty<SecurityId> securityId() {
      return securityId;
    }

    /**
     * The meta-property for the {@code underlying} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Swap> underlying() {
      return underlying;
    }

    /**
     * The meta-property for the {@code accrualFactor} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> accrualFactor() {
      return accrualFactor;
    }

    /**
     * The meta-property for the {@code notional} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> notional() {
      return notional;
    }

    /**
     * The meta-property for the {@code lastTradeDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> lastTradeDate() {
      return lastTradeDate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          return ((OisFutures) bean).getSecurityId();
        case -1770633379:  // underlying
          return ((OisFutures) bean).getUnderlying();
        case -1540322338:  // accrualFactor
          return ((OisFutures) bean).getAccrualFactor();
        case 1585636160:  // notional
          return ((OisFutures) bean).getNotional();
        case -1041950404:  // lastTradeDate
          return ((OisFutures) bean).getLastTradeDate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code OisFutures}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<OisFutures> {

    private SecurityId securityId;
    private Swap underlying;
    private double accrualFactor;
    private double notional;
    private LocalDate lastTradeDate;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(OisFutures beanToCopy) {
      this.securityId = beanToCopy.getSecurityId();
      this.underlying = beanToCopy.getUnderlying();
      this.accrualFactor = beanToCopy.getAccrualFactor();
      this.notional = beanToCopy.getNotional();
      this.lastTradeDate = beanToCopy.getLastTradeDate();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          return securityId;
        case -1770633379:  // underlying
          return underlying;
        case -1540322338:  // accrualFactor
          return accrualFactor;
        case 1585636160:  // notional
          return notional;
        case -1041950404:  // lastTradeDate
          return lastTradeDate;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          this.securityId = (SecurityId) newValue;
          break;
        case -1770633379:  // underlying
          this.underlying = (Swap) newValue;
          break;
        case -1540322338:  // accrualFactor
          this.accrualFactor = (Double) newValue;
          break;
        case 1585636160:  // notional
          this.notional = (Double) newValue;
          break;
        case -1041950404:  // lastTradeDate
          this.lastTradeDate = (LocalDate) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public OisFutures build() {
      return new OisFutures(
          securityId,
          underlying,
          accrualFactor,
          notional,
          lastTradeDate);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the security identifier.
     * <p>
     * This identifier uniquely identifies the security within the system.
     * @param securityId  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder securityId(SecurityId securityId) {
      JodaBeanUtils.notNull(securityId, "securityId");
      this.securityId = securityId;
      return this;
    }

    /**
     * Sets the OIS underlying the futures. The first leg is fixed and the second leg is overnight.
     * @param underlying  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder underlying(Swap underlying) {
      JodaBeanUtils.notNull(underlying, "underlying");
      this.underlying = underlying;
      return this;
    }

    /**
     * Sets the accrual factor or risk measure associated to the futures, typically 0.25 for a 3-month swap.
     * @param accrualFactor  the new value
     * @return this, for chaining, not null
     */
    public Builder accrualFactor(double accrualFactor) {
      ArgChecker.notNegativeOrZero(accrualFactor, "accrualFactor");
      this.accrualFactor = accrualFactor;
      return this;
    }

    /**
     * Sets the futures notional.
     * @param notional  the new value
     * @return this, for chaining, not null
     */
    public Builder notional(double notional) {
      ArgChecker.notNegativeOrZero(notional, "notional");
      this.notional = notional;
      return this;
    }

    /**
     * Sets the last trading date.
     * @param lastTradeDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder lastTradeDate(LocalDate lastTradeDate) {
      JodaBeanUtils.notNull(lastTradeDate, "lastTradeDate");
      this.lastTradeDate = lastTradeDate;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(192);
      buf.append("OisFutures.Builder{");
      buf.append("securityId").append('=').append(JodaBeanUtils.toString(securityId)).append(',').append(' ');
      buf.append("underlying").append('=').append(JodaBeanUtils.toString(underlying)).append(',').append(' ');
      buf.append("accrualFactor").append('=').append(JodaBeanUtils.toString(accrualFactor)).append(',').append(' ');
      buf.append("notional").append('=').append(JodaBeanUtils.toString(notional)).append(',').append(' ');
      buf.append("lastTradeDate").append('=').append(JodaBeanUtils.toString(lastTradeDate));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
