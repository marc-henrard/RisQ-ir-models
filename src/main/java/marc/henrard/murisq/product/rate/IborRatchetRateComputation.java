/**
 * Copyright (C) 2020 - present by Marc Henrard.
 */
package marc.henrard.murisq.product.rate;

import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

import com.google.common.collect.ImmutableSet;
import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.basics.index.IborIndex;
import com.opengamma.strata.basics.index.IborIndexObservation;
import com.opengamma.strata.basics.index.Index;
import com.opengamma.strata.collect.array.DoubleArray;
import com.opengamma.strata.product.rate.RateComputation;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Ratchet coupon description.
 * <p>
 * Floor applied first and then cap: Math.min(Math.max(cpnMain, cpnFloor), cpnCap);
 * If cap below floor, cap is enforced; there is no check that cap is above floor
 * <p>
 * Each payment is dependent of the previous coupon, the current IBOR rate and some cap/floor. 
 * Previous coupon P and ibor rate I. The main coefficients are m(1...3), 
 * the floors f(1...3) and the caps c(1...3)
 * The rate is m(1) * P + m(2) * I + m(3)
 * subject to a floor f(1) * P + f(2) * I + f(3)
 * and then a cap c(1) * P + c(2) * I + c(3)
 * The payment is the above rate multiplied by the year fraction associated to the IBOR rate.
 * 
 * @author Marc Henrard
 */
@BeanDefinition(factoryName = "of")
public final class IborRatchetRateComputation
    implements RateComputation, ImmutableBean, Serializable {

  /** The underlying index observation. */
  @PropertyDefinition(validate = "notNull")
  private final IborIndexObservation observation;
  /** The coefficients of the main payment (before floor and cap). Array of length 3. The first coefficient is 
   * the previous coupon factor, the second is the Ibor factor and the third is the additive term. */
  @PropertyDefinition(validate = "notNull")
  private final DoubleArray mainCoefficients;
  /** The coefficients of the floor. Array of length 3. The first coefficient is the previous coupon factor,
   * the second is the Ibor factor and the third is the additive term. */
  @PropertyDefinition(validate = "notNull")
  private final DoubleArray floorCoefficients;
  /** The coefficients of the cap. Array of length 3. The first coefficient is the previous coupon factor,
   * the second is the Ibor factor and the third is the additive term. */
  @PropertyDefinition(validate = "notNull")
  private final DoubleArray capCoefficients;

  @Override
  public void collectIndices(ImmutableSet.Builder<Index> builder) {
    builder.add(getIndex());
  }

  /**
   * Gets the Ibor index.
   * 
   * @return the index
   */
  public IborIndex getIndex() {
    return observation.getIndex();
  }

  /**
   * Gets the currency of the Ibor index.
   * 
   * @return the currency of the index
   */
  public Currency getCurrency() {
    return getIndex().getCurrency();
  }

  /**
   * Gets the fixing date.
   * 
   * @return the fixing date
   */
  public LocalDate getFixingDate() {
    return observation.getFixingDate();
  }

  /**
   * Gets the effective date.
   * 
   * @return the effective date
   */
  public LocalDate getEffectiveDate() {
    return observation.getEffectiveDate();
  }

  /**
   * Gets the maturity date.
   * 
   * @return the maturity date
   */
  public LocalDate getMaturityDate() {
    return observation.getMaturityDate();
  }

  /**
   * Gets the year fraction.
   * 
   * @return the year fraction
   */
  public double getYearFraction() {
    return observation.getYearFraction();
  }
  
  /**
   * Returns the ratchet rate based on the previous coupon rate and the Ibor rate.
   * 
   * @param previousRate  the previous ratchet coupon rate
   * @param iborRate  the Ibor rate
   * @return  the current ratchet rate
   */
  public double rate(double previousRate, double iborRate) {
    double main = mainCoefficients.get(0) * previousRate + mainCoefficients.get(1) * iborRate + mainCoefficients.get(2);
    double floor = floorCoefficients.get(0) * previousRate + floorCoefficients.get(1) * iborRate + floorCoefficients.get(2);
    double cap = capCoefficients.get(0) * previousRate + capCoefficients.get(1) * iborRate + capCoefficients.get(2);
    return Math.min(Math.max(main, floor), cap);
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code IborRatchetRateComputation}.
   * @return the meta-bean, not null
   */
  public static IborRatchetRateComputation.Meta meta() {
    return IborRatchetRateComputation.Meta.INSTANCE;
  }

  static {
    MetaBean.register(IborRatchetRateComputation.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Obtains an instance.
   * @param observation  the value of the property, not null
   * @param mainCoefficients  the value of the property, not null
   * @param floorCoefficients  the value of the property, not null
   * @param capCoefficients  the value of the property, not null
   * @return the instance
   */
  public static IborRatchetRateComputation of(
      IborIndexObservation observation,
      DoubleArray mainCoefficients,
      DoubleArray floorCoefficients,
      DoubleArray capCoefficients) {
    return new IborRatchetRateComputation(
      observation,
      mainCoefficients,
      floorCoefficients,
      capCoefficients);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static IborRatchetRateComputation.Builder builder() {
    return new IborRatchetRateComputation.Builder();
  }

  private IborRatchetRateComputation(
      IborIndexObservation observation,
      DoubleArray mainCoefficients,
      DoubleArray floorCoefficients,
      DoubleArray capCoefficients) {
    JodaBeanUtils.notNull(observation, "observation");
    JodaBeanUtils.notNull(mainCoefficients, "mainCoefficients");
    JodaBeanUtils.notNull(floorCoefficients, "floorCoefficients");
    JodaBeanUtils.notNull(capCoefficients, "capCoefficients");
    this.observation = observation;
    this.mainCoefficients = mainCoefficients;
    this.floorCoefficients = floorCoefficients;
    this.capCoefficients = capCoefficients;
  }

  @Override
  public IborRatchetRateComputation.Meta metaBean() {
    return IborRatchetRateComputation.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying index observation.
   * @return the value of the property, not null
   */
  public IborIndexObservation getObservation() {
    return observation;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the mainCoefficients.
   * @return the value of the property, not null
   */
  public DoubleArray getMainCoefficients() {
    return mainCoefficients;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the floorCoefficients.
   * @return the value of the property, not null
   */
  public DoubleArray getFloorCoefficients() {
    return floorCoefficients;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the capCoefficients.
   * @return the value of the property, not null
   */
  public DoubleArray getCapCoefficients() {
    return capCoefficients;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IborRatchetRateComputation other = (IborRatchetRateComputation) obj;
      return JodaBeanUtils.equal(observation, other.observation) &&
          JodaBeanUtils.equal(mainCoefficients, other.mainCoefficients) &&
          JodaBeanUtils.equal(floorCoefficients, other.floorCoefficients) &&
          JodaBeanUtils.equal(capCoefficients, other.capCoefficients);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(observation);
    hash = hash * 31 + JodaBeanUtils.hashCode(mainCoefficients);
    hash = hash * 31 + JodaBeanUtils.hashCode(floorCoefficients);
    hash = hash * 31 + JodaBeanUtils.hashCode(capCoefficients);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("IborRatchetRateComputation{");
    buf.append("observation").append('=').append(JodaBeanUtils.toString(observation)).append(',').append(' ');
    buf.append("mainCoefficients").append('=').append(JodaBeanUtils.toString(mainCoefficients)).append(',').append(' ');
    buf.append("floorCoefficients").append('=').append(JodaBeanUtils.toString(floorCoefficients)).append(',').append(' ');
    buf.append("capCoefficients").append('=').append(JodaBeanUtils.toString(capCoefficients));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IborRatchetRateComputation}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code observation} property.
     */
    private final MetaProperty<IborIndexObservation> observation = DirectMetaProperty.ofImmutable(
        this, "observation", IborRatchetRateComputation.class, IborIndexObservation.class);
    /**
     * The meta-property for the {@code mainCoefficients} property.
     */
    private final MetaProperty<DoubleArray> mainCoefficients = DirectMetaProperty.ofImmutable(
        this, "mainCoefficients", IborRatchetRateComputation.class, DoubleArray.class);
    /**
     * The meta-property for the {@code floorCoefficients} property.
     */
    private final MetaProperty<DoubleArray> floorCoefficients = DirectMetaProperty.ofImmutable(
        this, "floorCoefficients", IborRatchetRateComputation.class, DoubleArray.class);
    /**
     * The meta-property for the {@code capCoefficients} property.
     */
    private final MetaProperty<DoubleArray> capCoefficients = DirectMetaProperty.ofImmutable(
        this, "capCoefficients", IborRatchetRateComputation.class, DoubleArray.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "observation",
        "mainCoefficients",
        "floorCoefficients",
        "capCoefficients");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 122345516:  // observation
          return observation;
        case 58067511:  // mainCoefficients
          return mainCoefficients;
        case 886129674:  // floorCoefficients
          return floorCoefficients;
        case 2049517264:  // capCoefficients
          return capCoefficients;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public IborRatchetRateComputation.Builder builder() {
      return new IborRatchetRateComputation.Builder();
    }

    @Override
    public Class<? extends IborRatchetRateComputation> beanType() {
      return IborRatchetRateComputation.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code observation} property.
     * @return the meta-property, not null
     */
    public MetaProperty<IborIndexObservation> observation() {
      return observation;
    }

    /**
     * The meta-property for the {@code mainCoefficients} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DoubleArray> mainCoefficients() {
      return mainCoefficients;
    }

    /**
     * The meta-property for the {@code floorCoefficients} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DoubleArray> floorCoefficients() {
      return floorCoefficients;
    }

    /**
     * The meta-property for the {@code capCoefficients} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DoubleArray> capCoefficients() {
      return capCoefficients;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 122345516:  // observation
          return ((IborRatchetRateComputation) bean).getObservation();
        case 58067511:  // mainCoefficients
          return ((IborRatchetRateComputation) bean).getMainCoefficients();
        case 886129674:  // floorCoefficients
          return ((IborRatchetRateComputation) bean).getFloorCoefficients();
        case 2049517264:  // capCoefficients
          return ((IborRatchetRateComputation) bean).getCapCoefficients();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code IborRatchetRateComputation}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<IborRatchetRateComputation> {

    private IborIndexObservation observation;
    private DoubleArray mainCoefficients;
    private DoubleArray floorCoefficients;
    private DoubleArray capCoefficients;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(IborRatchetRateComputation beanToCopy) {
      this.observation = beanToCopy.getObservation();
      this.mainCoefficients = beanToCopy.getMainCoefficients();
      this.floorCoefficients = beanToCopy.getFloorCoefficients();
      this.capCoefficients = beanToCopy.getCapCoefficients();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 122345516:  // observation
          return observation;
        case 58067511:  // mainCoefficients
          return mainCoefficients;
        case 886129674:  // floorCoefficients
          return floorCoefficients;
        case 2049517264:  // capCoefficients
          return capCoefficients;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 122345516:  // observation
          this.observation = (IborIndexObservation) newValue;
          break;
        case 58067511:  // mainCoefficients
          this.mainCoefficients = (DoubleArray) newValue;
          break;
        case 886129674:  // floorCoefficients
          this.floorCoefficients = (DoubleArray) newValue;
          break;
        case 2049517264:  // capCoefficients
          this.capCoefficients = (DoubleArray) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public IborRatchetRateComputation build() {
      return new IborRatchetRateComputation(
          observation,
          mainCoefficients,
          floorCoefficients,
          capCoefficients);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the underlying index observation.
     * @param observation  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder observation(IborIndexObservation observation) {
      JodaBeanUtils.notNull(observation, "observation");
      this.observation = observation;
      return this;
    }

    /**
     * Sets the mainCoefficients.
     * @param mainCoefficients  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder mainCoefficients(DoubleArray mainCoefficients) {
      JodaBeanUtils.notNull(mainCoefficients, "mainCoefficients");
      this.mainCoefficients = mainCoefficients;
      return this;
    }

    /**
     * Sets the floorCoefficients.
     * @param floorCoefficients  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder floorCoefficients(DoubleArray floorCoefficients) {
      JodaBeanUtils.notNull(floorCoefficients, "floorCoefficients");
      this.floorCoefficients = floorCoefficients;
      return this;
    }

    /**
     * Sets the capCoefficients.
     * @param capCoefficients  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder capCoefficients(DoubleArray capCoefficients) {
      JodaBeanUtils.notNull(capCoefficients, "capCoefficients");
      this.capCoefficients = capCoefficients;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("IborRatchetRateComputation.Builder{");
      buf.append("observation").append('=').append(JodaBeanUtils.toString(observation)).append(',').append(' ');
      buf.append("mainCoefficients").append('=').append(JodaBeanUtils.toString(mainCoefficients)).append(',').append(' ');
      buf.append("floorCoefficients").append('=').append(JodaBeanUtils.toString(floorCoefficients)).append(',').append(' ');
      buf.append("capCoefficients").append('=').append(JodaBeanUtils.toString(capCoefficients));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
