/**
 * Copyright (C) 2015 - present by Marc Henrard.
 */
package marc.henrard.murisq.pricer.decomposition;

import java.io.Serializable;

import org.joda.beans.ImmutableBean;

import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.collect.array.DoubleArray;

import org.joda.beans.MetaBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

/**
 * Class describing the values of multi-curve equivalent.
 * <p>
 * In Monte Carlo setting, this corresponds to one path at one step.
 * <p>
 * Some of the values may not be populated and inferred from the other values in the pricing mechanism.
 */
@BeanDefinition(factoryName = "of")
public final class MulticurveEquivalentValues
    implements ImmutableBean, Serializable {

  /** The discount factors associated to the payments. */
  @PropertyDefinition
  private final DoubleArray discountFactors;
  /** The (forward) ibor rates or ibor processes associated to the Ibor rate observations. */
  @PropertyDefinition
  private final DoubleArray iborRates;
  /** The (forward) overnight rates or overnight processes associated to the overnight rate observations. */
  @PropertyDefinition
  private final DoubleArray onRates;
  // TODO: numeraire?
  
  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code MulticurveEquivalentValues}.
   * @return the meta-bean, not null
   */
  public static MulticurveEquivalentValues.Meta meta() {
    return MulticurveEquivalentValues.Meta.INSTANCE;
  }

  static {
    MetaBean.register(MulticurveEquivalentValues.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Obtains an instance.
   * @param discountFactors  the value of the property
   * @param iborRates  the value of the property
   * @param onRates  the value of the property
   * @return the instance
   */
  public static MulticurveEquivalentValues of(
      DoubleArray discountFactors,
      DoubleArray iborRates,
      DoubleArray onRates) {
    return new MulticurveEquivalentValues(
      discountFactors,
      iborRates,
      onRates);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static MulticurveEquivalentValues.Builder builder() {
    return new MulticurveEquivalentValues.Builder();
  }

  private MulticurveEquivalentValues(
      DoubleArray discountFactors,
      DoubleArray iborRates,
      DoubleArray onRates) {
    this.discountFactors = discountFactors;
    this.iborRates = iborRates;
    this.onRates = onRates;
  }

  @Override
  public MulticurveEquivalentValues.Meta metaBean() {
    return MulticurveEquivalentValues.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the discount factors associated to the payments.
   * @return the value of the property
   */
  public DoubleArray getDiscountFactors() {
    return discountFactors;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the (forward) ibor rates or ibor processes associated to the Ibor rate observations.
   * @return the value of the property
   */
  public DoubleArray getIborRates() {
    return iborRates;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the (forward) overnight rates or overnight processes associated to the overnight rate observations.
   * @return the value of the property
   */
  public DoubleArray getOnRates() {
    return onRates;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      MulticurveEquivalentValues other = (MulticurveEquivalentValues) obj;
      return JodaBeanUtils.equal(discountFactors, other.discountFactors) &&
          JodaBeanUtils.equal(iborRates, other.iborRates) &&
          JodaBeanUtils.equal(onRates, other.onRates);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(discountFactors);
    hash = hash * 31 + JodaBeanUtils.hashCode(iborRates);
    hash = hash * 31 + JodaBeanUtils.hashCode(onRates);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("MulticurveEquivalentValues{");
    buf.append("discountFactors").append('=').append(JodaBeanUtils.toString(discountFactors)).append(',').append(' ');
    buf.append("iborRates").append('=').append(JodaBeanUtils.toString(iborRates)).append(',').append(' ');
    buf.append("onRates").append('=').append(JodaBeanUtils.toString(onRates));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code MulticurveEquivalentValues}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code discountFactors} property.
     */
    private final MetaProperty<DoubleArray> discountFactors = DirectMetaProperty.ofImmutable(
        this, "discountFactors", MulticurveEquivalentValues.class, DoubleArray.class);
    /**
     * The meta-property for the {@code iborRates} property.
     */
    private final MetaProperty<DoubleArray> iborRates = DirectMetaProperty.ofImmutable(
        this, "iborRates", MulticurveEquivalentValues.class, DoubleArray.class);
    /**
     * The meta-property for the {@code onRates} property.
     */
    private final MetaProperty<DoubleArray> onRates = DirectMetaProperty.ofImmutable(
        this, "onRates", MulticurveEquivalentValues.class, DoubleArray.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "discountFactors",
        "iborRates",
        "onRates");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -91613053:  // discountFactors
          return discountFactors;
        case 1263680567:  // iborRates
          return iborRates;
        case -1338366732:  // onRates
          return onRates;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public MulticurveEquivalentValues.Builder builder() {
      return new MulticurveEquivalentValues.Builder();
    }

    @Override
    public Class<? extends MulticurveEquivalentValues> beanType() {
      return MulticurveEquivalentValues.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code discountFactors} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DoubleArray> discountFactors() {
      return discountFactors;
    }

    /**
     * The meta-property for the {@code iborRates} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DoubleArray> iborRates() {
      return iborRates;
    }

    /**
     * The meta-property for the {@code onRates} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DoubleArray> onRates() {
      return onRates;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -91613053:  // discountFactors
          return ((MulticurveEquivalentValues) bean).getDiscountFactors();
        case 1263680567:  // iborRates
          return ((MulticurveEquivalentValues) bean).getIborRates();
        case -1338366732:  // onRates
          return ((MulticurveEquivalentValues) bean).getOnRates();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code MulticurveEquivalentValues}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<MulticurveEquivalentValues> {

    private DoubleArray discountFactors;
    private DoubleArray iborRates;
    private DoubleArray onRates;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(MulticurveEquivalentValues beanToCopy) {
      this.discountFactors = beanToCopy.getDiscountFactors();
      this.iborRates = beanToCopy.getIborRates();
      this.onRates = beanToCopy.getOnRates();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -91613053:  // discountFactors
          return discountFactors;
        case 1263680567:  // iborRates
          return iborRates;
        case -1338366732:  // onRates
          return onRates;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -91613053:  // discountFactors
          this.discountFactors = (DoubleArray) newValue;
          break;
        case 1263680567:  // iborRates
          this.iborRates = (DoubleArray) newValue;
          break;
        case -1338366732:  // onRates
          this.onRates = (DoubleArray) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public MulticurveEquivalentValues build() {
      return new MulticurveEquivalentValues(
          discountFactors,
          iborRates,
          onRates);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the discount factors associated to the payments.
     * @param discountFactors  the new value
     * @return this, for chaining, not null
     */
    public Builder discountFactors(DoubleArray discountFactors) {
      this.discountFactors = discountFactors;
      return this;
    }

    /**
     * Sets the (forward) ibor rates or ibor processes associated to the Ibor rate observations.
     * @param iborRates  the new value
     * @return this, for chaining, not null
     */
    public Builder iborRates(DoubleArray iborRates) {
      this.iborRates = iborRates;
      return this;
    }

    /**
     * Sets the (forward) overnight rates or overnight processes associated to the overnight rate observations.
     * @param onRates  the new value
     * @return this, for chaining, not null
     */
    public Builder onRates(DoubleArray onRates) {
      this.onRates = onRates;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("MulticurveEquivalentValues.Builder{");
      buf.append("discountFactors").append('=').append(JodaBeanUtils.toString(discountFactors)).append(',').append(' ');
      buf.append("iborRates").append('=').append(JodaBeanUtils.toString(iborRates)).append(',').append(' ');
      buf.append("onRates").append('=').append(JodaBeanUtils.toString(onRates));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
